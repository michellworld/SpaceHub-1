/**
 * 
 */
package com.project.product.controller;


import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.project.product.dao.ProductDAO;
import com.project.product.entity.Product;
import com.project.product.service.AdminService;
import com.project.spacehubsecurity.controller.BufferedOutputStream;
import com.project.spacehubsecurity.controller.File;
import com.project.spacehubsecurity.controller.FileOutputStream;
import com.project.spacehubsecurity.controller.MultipartFile;
import com.project.spacehubsecurity.controller.ResponseBody;




/**
 * @author gbemisola
 *
 */
@Controller
@RequestMapping("/admin")
public class ProductController {
	
	private static final Logger logger = LoggerFactory
			.getLogger(ProductController.class);
	
	//inject the product dao service
	@Autowired
	private AdminService adminService;
	
	@GetMapping("/product-list")
	public String listProducts(Model theModel) {
		//get products from the service
		
		List<Product> theProducts = adminService.getProducts();
		
		
		// add the product to the model
		theModel.addAttribute("products", theProducts);
		
		return "products-list";
	}
	
	@GetMapping("/addProductForm")
	public String addProduct(Model theModel) {
		
		// model attribute to bind form data
		
		Product theProduct = new Product();
		
		theModel.addAttribute("product", theProduct);
		
		return "product-form";
	}
	
	@PostMapping("/saveProduct")
	public String saveProduct(@ModelAttribute("product") Product theProduct)
	{
		//save the product using the product service
		adminService.saveProduct(theProduct);
		
		return "redirect:/admin/product-list";
	}
	
	@RequestMapping(value = "/saveProduct", method = RequestMethod.POST)
	public @ResponseBody
	String uploadFileHandler(@RequestParam("name") String name,
			@RequestParam("file") MultipartFile file) {

		if (!file.isEmpty()) {
			try {
				byte[] bytes = file.getBytes();

				// Creating the directory to store file
				String rootPath = System.getProperty("catalina.home");
				File dir = new File(rootPath + File.separator + "tmpFiles");
				if (!dir.exists())
					dir.mkdirs();

				// Create the file on server
				File serverFile = new File(dir.getAbsolutePath()
						+ File.separator + name);
				BufferedOutputStream stream = new BufferedOutputStream(
						new FileOutputStream(serverFile));
				stream.write(bytes);
				stream.close();

				logger.info("Server File Location="
						+ serverFile.getAbsolutePath());

				return "You successfully uploaded file=" + name;
			} catch (Exception e) {
				return "You failed to upload " + name + " => " + e.getMessage();
			}
		} else {
			return "You failed to upload " + name
					+ " because the file was empty.";
		}
	}


	
	@GetMapping("/showFormForUpdate")
	public String showFormForUpadte(@RequestParam("productId") int theId, Model theModel) {
		
	//get product from the service
		
		Product theProduct = adminService.getProduct(theId);
		
		// set product as a model attribute to pre-populate the form
		
		theModel.addAttribute("product", theProduct);
		
		
		//send over to our form
		
		
		return "product-form";
	
	}
	
	@GetMapping("/delete-product")
	public String deleteProduct(@RequestParam("productId") int theId) {
		
		// delete the customer
		adminService.deleteProduct(theId);
		
		
		return "redirect:/admin/product-list";
	}
	
}

